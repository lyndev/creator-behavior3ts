{"version":3,"sources":["assets/libs/b3/decorators/B3Limiter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAA0C;AAC1C,mDAAkD;AAIlD;IAA+B,6BAAW;IAEtC,mBAAY,CAAiB;eACzB,kBAAM,CAAC,CAAC;IACZ,CAAC;IAES,8BAAU,GAApB,UAAqB,CAAM;QACvB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;YACZ,MAAM,mEAAmE,CAAC;SAC7E;QACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,wBAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,wBAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,sBAAU,CAAC,KAAK,CAAC;SAC3B;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;YAClB,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEtC,IAAI,MAAM,IAAI,sBAAU,CAAC,OAAO,IAAI,MAAM,IAAI,sBAAU,CAAC,OAAO;gBAC5D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAE3D,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,sBAAU,CAAC,OAAO,CAAC;IAC9B,CAAC;IACL,gBAAC;AAAD,CAnCA,AAmCC,CAnC8B,yBAAW,GAmCzC;AAnCY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { EnumStatus } from \"../Constants\";\nimport { B3Decorator } from \"../core/B3Decorator\";\nimport { IB3DecoratorProp } from \"../core/B3INodeProperties\";\nimport { B3Tick } from \"../core/B3Tick\";\n\nexport class B3Limiter extends B3Decorator {\n    maxLoop: number;\n    constructor(d: IB3LimiterProp) {\n        super(d);\n    }\n\n    protected _parseProp(d: any) {\n        if (!d.maxLoop) {\n            throw 'maxLoop parameter in Limiter decorator is an obligatory parameter';\n        }\n        this.maxLoop = d.maxLoop || 1;\n    }\n\n    open(tick: B3Tick) {\n        tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    }\n\n    tick(tick: B3Tick) {\n        if (!this.child) {\n            return EnumStatus.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n\n        if (i < this.maxLoop) {\n            var status = this.child.execute(tick);\n\n            if (status == EnumStatus.SUCCESS || status == EnumStatus.FAILURE)\n                tick.blackboard.set('i', i + 1, tick.tree.id, this.id);\n\n            return status;\n        }\n\n        return EnumStatus.FAILURE;\n    }\n}\n\nexport interface IB3LimiterProp extends IB3DecoratorProp {\n    maxLoop: number;\n}"]}