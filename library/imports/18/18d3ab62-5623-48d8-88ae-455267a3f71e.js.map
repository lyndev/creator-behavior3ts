{"version":3,"sources":["assets/libs/behavior3ts/core/B3BehaviorTree.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EnumCategory } from \"../Constants\";\nimport { B3ActionsCls } from \"../register/B3ActionsClsRegister\";\nimport { B3CompositesCls } from \"../register/B3CompositesClsRegister\";\nimport { B3CustomClsRegister } from \"../register/B3CustomClsRegister\";\nimport { B3DecoratorsCls } from \"../register/B3DecoratorsClsRegister\";\nimport { createUUID } from \"../utils/B3Utils\";\nimport { B3BaseNode } from \"./B3BaseNode\";\nimport { B3Composite } from \"./B3Composite\";\nimport { B3Decorator } from \"./B3Decorator\";\nimport { B3Tick } from \"./B3Tick\";\n\nexport class B3BehaviorTree {\n    id: string;\n    title: string;\n    description: string;\n    properties: any;\n    root: B3BaseNode;\n    debug: any;\n    nodes: { [id: string]: B3BaseNode };\n    constructor(id?: string) {\n        this.id = id || createUUID();\n        this.title = 'The behavior tree';\n        this.description = 'Default description';\n        this.properties = {};\n        this.root = null;\n        this.debug = null;\n    }\n\n    load(data, names) {\n        names = names || {};\n        this.id = data.id || this.id;\n        this.title = data.title || this.title;\n        this.description = data.description || this.description;\n        this.properties = data.properties || this.properties;\n\n        var nodes = {};\n        var id, spec, node;\n        // Create the node list (without connection between them)\n        for (id in data.nodes) {\n            spec = data.nodes[id];\n            let clsName = spec.name\n            clsName = \"B3\" + clsName\n            var Cls;\n            if (B3CustomClsRegister[spec.name]) { // 自己定义的节点\n                // Look for the name in custom nodes\n                Cls = B3CustomClsRegister[spec.name];\n            } else if (B3ActionsCls[clsName]) {\n                Cls = B3ActionsCls[clsName]\n            } else if (B3CompositesCls[clsName]) {\n                Cls = B3CompositesCls[clsName]\n            } else if (B3DecoratorsCls[clsName]) {\n                Cls = B3DecoratorsCls[clsName];\n            } else {\n                // Invalid node name\n                // throw new EvalError('BehaviorTree.load: Invalid node name + \"' +\n                //     spec.name + '\".');\n\n                console.error('BehaviorTree.load: Invalid node name + \"' + spec.name + '\".')\n                continue\n            }\n\n            node = new Cls(spec);\n\n            nodes[id] = node;\n        }\n\n        // Connect the nodes\n        for (id in data.nodes) {\n            spec = data.nodes[id];\n            node = nodes[id];\n\n            if (node.category === EnumCategory.COMPOSITE && spec.children) {\n                for (var i = 0; i < spec.children.length; i++) {\n                    var cid = spec.children[i];\n                    node.children.push(nodes[cid]);\n                }\n            } else if (node.category === EnumCategory.DECORATOR && spec.child) {\n                node.child = nodes[spec.child];\n            }\n        }\n        this.nodes = nodes;\n        this.root = nodes[data.root];\n    }\n\n    /**\n     * This method dump the current BT into a data structure.\n     *\n     * Note: This method does not record the current node parameters. Thus,\n     * it may not be compatible with load for now.\n     *\n     * @method dump\n     * @return {Object} A data object representing this tree.\n     **/\n    dump() {\n        var data: any = {};\n        var customNames = [];\n\n        data.title = this.title;\n        data.description = this.description;\n        data.root = (this.root) ? this.root.id : null;\n        data.properties = this.properties;\n        data.nodes = {};\n        data.custom_nodes = [];\n\n        if (!this.root) return data;\n\n        var stack = [this.root];\n        while (stack.length > 0) {\n            var node: B3BaseNode = stack.pop();\n\n            var spec: any = {};\n            spec.id = node.id;\n            spec.name = node.name;\n            spec.title = node.title;\n            spec.description = node.description;\n            spec.properties = node.properties;\n            spec.parameters = node.parameters;\n\n            // verify custom node\n            var proto = (node.constructor && node.constructor.prototype);\n            var nodeName = (proto && proto.name) || node.name;\n            node.category != EnumCategory.ACTION\n            if (node.category != EnumCategory.ACTION && node.category != EnumCategory.COMPOSITE && node.category != EnumCategory.DECORATOR && customNames.indexOf(nodeName) < 0) {\n                var subdata: any = {};\n                subdata.name = nodeName;\n                subdata.title = (proto && proto.title) || node.title;\n                subdata.category = node.category;\n\n                customNames.push(nodeName);\n                data.custom_nodes.push(subdata);\n            }\n\n            // store children/child\n            if (node.category === EnumCategory.COMPOSITE) {\n                let composite = <B3Composite>node;\n                if (composite.children) {\n                    var children = [];\n                    for (var i = composite.children.length - 1; i >= 0; i--) {\n                        children.push(composite.children[i].id);\n                        stack.push(composite.children[i]);\n                    }\n                    spec.children = children;\n                }\n            } else if (node.category === EnumCategory.DECORATOR && (<B3Decorator>node).child) {\n                stack.push((<B3Decorator>node).child);\n                spec.child = (<B3Decorator>node).child.id;\n            }\n\n            data.nodes[node.id] = spec;\n        }\n\n        return data;\n    }\n\n    /**\n     * Propagates the tick signal through the tree, starting from the root.\n     *\n     * This method receives a target object of any type (Object, Array,\n     * DOMElement, whatever) and a `Blackboard` instance. The target object has\n     * no use at all for all Behavior3JS components, but surely is important\n     * for custom nodes. The blackboard instance is used by the tree and nodes\n     * to store execution variables (e.g., last node running) and is obligatory\n     * to be a `Blackboard` instance (or an object with the same interface).\n     *\n     * Internally, this method creates a Tick object, which will store the\n     * target and the blackboard objects.\n     *\n     * Note: BehaviorTree stores a list of open nodes from last tick, if these\n     * nodes weren't called after the current tick, this method will close them\n     * automatically.\n     *\n     * @method tick\n     * @param {Object} target A target object.\n     * @param {Blackboard} blackboard An instance of blackboard object.\n     * @return {Constant} The tick signal state.\n     **/\n    tick(target, blackboard) {\n        if (!blackboard) {\n            throw 'The blackboard parameter is obligatory and must be an ' +\n            'instance of B3Blackboard';\n        }\n\n        /* CREATE A TICK OBJECT */\n        var tick = new B3Tick();\n        tick.debug = this.debug;\n        tick.target = target;\n        tick.blackboard = blackboard;\n        tick.tree = this;\n\n        /* TICK NODE */\n        var state = this.root.execute(tick);\n\n        /* CLOSE NODES FROM LAST TICK, IF NEEDED */\n        var lastOpenNodes = blackboard.get('openNodes', this.id);\n        var currOpenNodes = tick.openNodes.slice(0);\n\n        // does not close if it is still open in this tick\n        var start = 0;\n        for (let i = 0, len = Math.min(lastOpenNodes.length, currOpenNodes.length); i < len; i++) {\n            if (lastOpenNodes[i] !== currOpenNodes[i]) {\n                start = i;\n                break;\n            }\n            start = i + 1;\n        }\n\n        // close the nodes\n        for (let i = lastOpenNodes.length - 1; i >= start; i--) {\n            let node: any = this.nodes[lastOpenNodes[i]];\n            node && node._close(tick);\n        }\n\n        /* POPULATE BLACKBOARD */\n        blackboard.set('openNodes', currOpenNodes, this.id);\n        blackboard.set('nodeCount', tick.nodeCount, this.id);\n\n        return state;\n    }\n}"]}