{"version":3,"sources":["assets/script/behavior/behaviorTress/TestAI.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA+E;AAC/E,4EAA2E;AAC3E,mEAAqE;AAC/D,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C;IAAoC,0BAAY;IAAhD;QAAA,qEA8BC;QAzBG,iBAAW,GAAY,IAAI,CAAA;;IAyB/B,CAAC;IAxBG,sBAAK,GAAL;QAAA,iBAaC;QAZG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,aAAa,CACpC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAC/D,CAAC,KAAK,EAAE,CAAA;QAET,IAAI,CAAC,cAAc,GAAG,IAAI,2BAAY,EAAE,CAAA;QACxC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,IAAkB;YACzE,IAAI,IAAI,EAAE;gBACN,KAAI,CAAC,QAAQ,GAAG,IAAI,+BAAc,CAAC,oBAAU,EAAE,CAAC,CAAA;gBAChD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;gBACpB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;aAC9C;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,uBAAM,GAAN,UAAO,EAAE;QACL,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;SAClE;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACpD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAA;SAC9C;IACL,CAAC;IAxBD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;+CACS;IALV,MAAM;QAD1B,OAAO;OACa,MAAM,CA8B1B;IAAD,aAAC;CA9BD,AA8BC,CA9BmC,EAAE,CAAC,SAAS,GA8B/C;kBA9BoB,MAAM","file":"","sourceRoot":"/","sourcesContent":["import { B3BehaviorTree } from '../../../libs/behavior3ts/core/B3BehaviorTree';\nimport { B3Blackboard } from '../../../libs/behavior3ts/core/B3Blackboard';\nimport { createUUID } from '../../../libs/behavior3ts/utils/B3Utils';\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class TestAI extends cc.Component {\n    testTree: B3BehaviorTree\n    blackboardData: B3Blackboard\n\n    @property(cc.Node)\n    attckTarget: cc.Node = null\n    start() {\n        cc.tween(this.attckTarget).repeatForever(\n            cc.tween(this.attckTarget).to(1, { x: 100 }).to(1, { x: 0 })\n        ).start()\n\n        this.blackboardData = new B3Blackboard()\n        cc.loader.loadRes(\"behavior3/testai3\", cc.JsonAsset, (err, json: cc.JsonAsset) => {\n            if (json) {\n                this.testTree = new B3BehaviorTree(createUUID())\n                let data = json.json\n                this.testTree.load(data, data.custom_nodes)\n            }\n        })\n    }\n\n    update(dt) {\n        if (this.attckTarget) {\n            this.blackboardData.set(\"targetpos\", this.attckTarget.position)\n        }\n        this.blackboardData.set(\"mypos\", this.node.position)\n        if (this.testTree) {\n            this.testTree.tick({}, this.blackboardData)\n        }\n    }\n}\n"]}