{"version":3,"sources":["assets/libs/b3/decorators/B3RepeatUntilFailure.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAA0C;AAC1C,mDAAkD;AAIlD,sBAAsB;AACtB;IAA0C,wCAAW;IAEjD,8BAAY,CAAkB;eAC1B,kBAAM,CAAC,CAAC;IACZ,CAAC;IAES,yCAAU,GAApB,UAAqB,CAAM;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,mCAAI,GAAJ,UAAK,IAAI;QACL,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAGD,mCAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,sBAAU,CAAC,KAAK,CAAC;SAC3B;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,MAAM,GAAG,sBAAU,CAAC,KAAK,CAAC;QAE9B,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;YACzC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,MAAM,IAAI,sBAAU,CAAC,OAAO,EAAE;gBAC9B,CAAC,EAAE,CAAC;aACP;iBAAM;gBACH,MAAM;aACT;SACJ;QAED,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,2BAAC;AAAD,CApCA,AAoCC,CApCyC,yBAAW,GAoCpD;AApCY,oDAAoB","file":"","sourceRoot":"/","sourcesContent":["import { EnumStatus } from \"../Constants\";\nimport { B3Decorator } from \"../core/B3Decorator\";\nimport { B3Tick } from \"../core/B3Tick\";\nimport { IB3RepeaterProp } from \"./B3Repeater\";\n\n//重复n次，或者直到遇到不是成功的状态为止\nexport class B3RepeatUntilFailure extends B3Decorator {\n    maxLoop: number;\n    constructor(d: IB3RepeaterProp) {\n        super(d);\n    }\n\n    protected _parseProp(d: any) {\n        this.maxLoop = this.maxLoop || -1;\n    }\n\n    open(tick) {\n        tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    }\n\n\n    tick(tick: B3Tick) {\n        if (!this.child) {\n            return EnumStatus.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n        var status = EnumStatus.ERROR;\n\n        while (this.maxLoop < 0 || i < this.maxLoop) {\n            status = this.child.execute(tick);\n\n            if (status == EnumStatus.SUCCESS) {\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        i = tick.blackboard.set('i', i, tick.tree.id, this.id);\n        return status;\n    }\n}"]}