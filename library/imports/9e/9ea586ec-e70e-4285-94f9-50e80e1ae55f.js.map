{"version":3,"sources":["assets/libs/b3/core/B3BaseNode.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EnumStatus } from \"../Constants\";\nimport { createUUID } from \"../utils/B3Utils\";\nimport { IB3NodeProp } from \"./B3INodeProperties\";\nimport { B3Tick } from \"./B3Tick\";\n\nexport abstract class B3BaseNode {\n    id: string;\n    category: string;\n    name: string;\n    title: string;\n    properties: any;\n    description: string;\n    parameters: any;\n    constructor(d: IB3NodeProp) {\n        this.id = d.id || createUUID();\n        this.category = d.category || '';\n        this.name = d.name || '';\n        this.title = d.title || this.name;\n        this.description = d.description || '';\n        this.properties = d.properties || {};\n        this.parameters = {};\n        this._parseProp(this.properties);\n    }\n\n    protected _parseProp(prop: any) {\n\n    }\n\n    /**\n     * 这是将tick信号传播到此节点的主要方法\n     * @param {Tick} tick A tick instance.\n     * @return {Constant} The tick state.\n     * @protected\n     **/\n    execute(tick: B3Tick) {\n        // ENTER\n        this._enter(tick);\n\n        // OPEN\n        if (!tick.blackboard.get('isOpen', tick.tree.id, this.id)) {\n            this._open(tick);\n        }\n\n        // TICK\n        var status = this._tick(tick);\n\n        // CLOSE\n        if (status !== EnumStatus.RUNNING) {\n            this._close(tick);\n        }\n\n        // EXIT\n        this._exit(tick);\n\n        return status;\n    }\n\n    /**\n     * Wrapper for enter method.\n     * @method _enter\n     * @param {Tick} tick A tick instance.\n     * @protected\n     **/\n    protected _enter(tick: B3Tick) {\n        tick.enterNode(this);\n        this.enter(tick);\n    }\n\n    /**\n     * Wrapper for open method.\n     * @method _open\n     * @param {Tick} tick A tick instance.\n     * @protected\n     **/\n    protected _open(tick: B3Tick) {\n        tick.openNode(this);\n        tick.blackboard.set('isOpen', true, tick.tree.id, this.id);\n        this.open(tick);\n    }\n\n    /**\n     * Wrapper for tick method.\n     * @method _tick\n     * @param {Tick} tick A tick instance.\n     * @return {Constant} A state constant.\n     * @protected\n     **/\n    protected _tick(tick: B3Tick) {\n        tick.tickNode(this);\n        return this.tick(tick);\n    }\n\n    /**\n     * Wrapper for close method.\n     * @method _close\n     * @param {Tick} tick A tick instance.\n     * @protected\n     **/\n    protected _close(tick: B3Tick) {\n        if (!tick.blackboard.get('isOpen', tick.tree.id, this.id)) return;\n        tick.closeNode(this);\n        tick.blackboard.set('isOpen', false, tick.tree.id, this.id);\n        this.close(tick);\n    }\n\n    /**\n     * Wrapper for exit method.\n     * @method _exit\n     * @param {Tick} tick A tick instance.\n     * @protected\n     **/\n    protected _exit(tick: B3Tick) {\n        tick.exitNode(this);\n        this.exit(tick);\n    }\n\n    /**\n     * 进入节点是执行的方法，每次运行都会执行\n     *\n     * @method enter\n     * @param {Tick} tick A tick instance.\n     **/\n    enter(tick: B3Tick) { }\n\n    /**\n     * 打开节点时运行的方法，只有节点打开时执行\n     * @method open\n     * @param {Tick} tick A tick instance.\n     **/\n    open(tick: B3Tick) { }\n\n    /**\n     * 每次执行节点的方法\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     **/\n    abstract tick(tick: B3Tick): EnumStatus;\n\n    /**\n     * 关闭节点的方法，当节点运行结果不是running时，会执行关闭\n     *\n     * @method close\n     * @param {Tick} tick A tick instance.\n     **/\n    close(tick: B3Tick) { }\n\n    /**\n     * 退出节点时执行的方法\n     *\n     * @method exit\n     * @param {Tick} tick A tick instance.\n     **/\n    exit(tick: B3Tick) { }\n}\n"]}