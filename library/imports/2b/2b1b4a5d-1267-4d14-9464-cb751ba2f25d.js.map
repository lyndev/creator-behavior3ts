{"version":3,"sources":["assets/libs/b3/core/B3BehaviorTreeGroup.ts"],"names":[],"mappings":";;;;;;;AAAA,mDAAkD;AAElD;IAAA;IAgEA,CAAC;IA9DG;;;OAGG;IACH,mCAAK,GAAL,UAAM,OAAqB;QACvB,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QAClC,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACpD;QAED,KAAK,IAAI,EAAE,IAAI,QAAQ,EAAE;YACrB,IAAI,IAAI,GAAU,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;SAClC;IACL,CAAC;IAED;;;;OAIG;IACH,mCAAK,GAAL,UAAM,SAAiB,EAAE,KAAW;QAChC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QACvB,IAAI,KAAK,GAAG,IAAI,+BAAc,EAAE,CAAC;QACjC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACxB,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,wCAAU,GAAlB,UAAmB,IAAW,EAAE,QAAa;QACzC,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,OAAK,GAAG,EAAE,CAAC;YACf,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC3B,IAAI,IAAI,GAAU,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACrC,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;YACD,OAAO,OAAK,CAAC;SAChB;QACD,IAAI,KAAK,GAAY,EAAE,CAAC;QACxB,KAAK,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YAC3B,IAAI,IAAI,GAAU,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACrB,IAAI,SAAS,GAAU,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC1C,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gBACpD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;gBACvB,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACpC;iBAAM;gBACH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;SACJ;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAGpB,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,0BAAC;AAAD,CAhEA,AAgEC,IAAA;AAhEY,kDAAmB","file":"","sourceRoot":"/","sourcesContent":["import { B3BehaviorTree } from \"./B3BehaviorTree\";\n\nexport class B3BehaviorTreeGroup {\n    private _trees: { [title: string]: ITree };\n    /**\n     * 格式化逻辑树项目数据，把依赖树信息安装好\n     * @param project 编辑器导出的项目信息\n     */\n    parse(project: ITreeProject) {\n        this._trees || (this._trees = {});\n        let treeHash = {};\n        for (let i = 0; i < project.trees.length; i++) {\n            treeHash[project.trees[i].id] = project.trees[i];\n        }\n\n        for (let id in treeHash) {\n            let tree: ITree = treeHash[id];\n            this._paserTree(tree, treeHash);\n            this._trees[tree.title] = tree;\n        }\n    }\n\n    /**\n     * 根据树的title生成对应的树\n     * @param treeTitle \n     * @param names \n     */\n    build(treeTitle: string, names?: any): B3BehaviorTree {\n        let tree = this._trees[treeTitle];\n        if (!tree) return null;\n        let bTree = new B3BehaviorTree();\n        bTree.load(tree, names);\n        return bTree;\n    }\n\n    private _paserTree(tree: ITree, treeHash: any): INode[] {\n        if (tree.pasered) {\n            let nodes = [];\n            for (let nodeId in tree.nodes) {\n                let node: INode = tree.nodes[nodeId];\n                nodes.push(node);\n            }\n            return nodes;\n        }\n        let nodes: INode[] = [];\n        for (let nodeId in tree.nodes) {\n            let node: INode = tree.nodes[nodeId];\n            if (treeHash[node.name]) {\n                let childTree: ITree = treeHash[node.name]\n                let addNodes = this._paserTree(childTree, treeHash);\n                nodes = nodes.concat(addNodes);\n                node.name = \"Sequence\";\n                node.children = [childTree.root];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        for (let i = 0; i < nodes.length; i++) {\n            tree.nodes[nodes[i].id] = nodes[i];\n        }\n        tree.pasered = true;\n\n\n        return nodes;\n    }\n}\n\ninterface IBase {\n    id: string;\n    title: string;\n    description: string;\n    properties: any;\n}\n\ninterface ITree extends IBase {\n    root: string,\n    nodes: { [id: string]: INode },\n    pasered?: boolean                //后期添加的\n}\n\n\ninterface INode extends IBase {\n    name: string;\n    children: string[];\n}\n\ninterface ITreeProject {\n    trees: ITree[];\n}"]}