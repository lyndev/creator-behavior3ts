{"version":3,"sources":["assets/libs/b3/core/B3Blackboard.ts"],"names":[],"mappings":";;;;;;;AAAI;IAGI;QACI,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED;;;;;;;;QAQI;IACI,qCAAc,GAAtB,UAAuB,SAAS;QAC5B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;YAC9B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG;gBAC1B,YAAY,EAAE,EAAE;gBAChB,WAAW,EAAE,EAAE;gBACf,gBAAgB,EAAE,CAAC;gBACnB,gBAAgB,EAAE,CAAC;aACtB,CAAC;SACL;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;;QASI;IACI,qCAAc,GAAtB,UAAuB,UAAU,EAAE,SAAS;QACxC,IAAI,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YACpB,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SAC1B;QAED,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;;;;QAaI;IACI,iCAAU,GAAlB,UAAmB,SAAS,EAAE,SAAS;QACnC,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9B,IAAI,SAAS,EAAE;YACX,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAExC,IAAI,SAAS,EAAE;gBACX,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACnD;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;;;;;;;;;;;QAeI;IACJ,0BAAG,GAAH,UAAI,GAAW,EAAE,KAAU,EAAE,SAAkB,EAAE,SAAkB;QAC/D,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;;;;QAeI;IACJ,0BAAG,GAAH,UAAI,GAAG,EAAE,SAAU,EAAE,SAAU;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,+BAAQ,GAAR;QACI,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9D,CAAC;IAED,+BAAQ,GAAR,UAAS,IAAS,EAAE,IAAS;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IACL,mBAAC;AAAD,CA9HA,AA8HC,IAAA;AA9HY,oCAAY","file":"","sourceRoot":"/","sourcesContent":["    export class B3Blackboard {\n        private _baseMemory: any;\n        private _treeMemory: any;\n        constructor() {\n            this._baseMemory = {};\n            this._treeMemory = {};\n        }\n\n        /**\n         * Internal method to retrieve the tree context memory. If the memory does\n         * not exist, this method creates it.\n         *\n         * @method _getTreeMemory\n         * @param {String} treeScope The id of the tree in scope.\n         * @return {Object} The tree memory.\n         * @protected\n         **/\n        private _getTreeMemory(treeScope) {\n            if (!this._treeMemory[treeScope]) {\n                this._treeMemory[treeScope] = {\n                    'nodeMemory': {},\n                    'openNodes': [],\n                    'traversalDepth': 0,\n                    'traversalCycle': 0,\n                };\n            }\n            return this._treeMemory[treeScope];\n        }\n\n        /**\n         * Internal method to retrieve the node context memory, given the tree\n         * memory. If the memory does not exist, this method creates is.\n         *\n         * @method _getNodeMemory\n         * @param {String} treeMemory the tree memory.\n         * @param {String} nodeScope The id of the node in scope.\n         * @return {Object} The node memory.\n         * @protected\n         **/\n        private _getNodeMemory(treeMemory, nodeScope) {\n            var memory = treeMemory.nodeMemory;\n            if (!memory[nodeScope]) {\n                memory[nodeScope] = {};\n            }\n\n            return memory[nodeScope];\n        }\n\n        /**\n         * Internal method to retrieve the context memory. If treeScope and\n         * nodeScope are provided, this method returns the per node per tree\n         * memory. If only the treeScope is provided, it returns the per tree\n         * memory. If no parameter is provided, it returns the global memory.\n         * Notice that, if only nodeScope is provided, this method will still\n         * return the global memory.\n         *\n         * @method _getMemory\n         * @param {String} treeScope The id of the tree scope.\n         * @param {String} nodeScope The id of the node scope.\n         * @return {Object} A memory object.\n         * @protected\n         **/\n        private _getMemory(treeScope, nodeScope) {\n            var memory = this._baseMemory;\n\n            if (treeScope) {\n                memory = this._getTreeMemory(treeScope);\n\n                if (nodeScope) {\n                    memory = this._getNodeMemory(memory, nodeScope);\n                }\n            }\n\n            return memory;\n        }\n\n        /**\n         * Stores a value in the blackboard. If treeScope and nodeScope are\n         * provided, this method will save the value into the per node per tree\n         * memory. If only the treeScope is provided, it will save the value into\n         * the per tree memory. If no parameter is provided, this method will save\n         * the value into the global memory. Notice that, if only nodeScope is\n         * provided (but treeScope not), this method will still save the value into\n         * the global memory.\n         *\n         * @method set\n         * @param {String} key The key to be stored.\n         * @param {String} value The value to be stored.\n         * @param {String} treeScope The tree id if accessing the tree or node\n         *                           memory.\n         * @param {String} nodeScope The node id if accessing the node memory.\n         **/\n        set(key: string, value: any, treeScope?: string, nodeScope?: string) {\n            var memory = this._getMemory(treeScope, nodeScope);\n            memory[key] = value;\n        }\n\n        /**\n         * Retrieves a value in the blackboard. If treeScope and nodeScope are\n         * provided, this method will retrieve the value from the per node per tree\n         * memory. If only the treeScope is provided, it will retrieve the value\n         * from the per tree memory. If no parameter is provided, this method will\n         * retrieve from the global memory. If only nodeScope is provided (but\n         * treeScope not), this method will still try to retrieve from the global\n         * memory.\n         *\n         * @method get\n         * @param {String} key The key to be retrieved.\n         * @param {String} treeScope The tree id if accessing the tree or node\n         *                           memory.\n         * @param {String} nodeScope The node id if accessing the node memory.\n         * @return {Object} The value stored or undefined.\n         **/\n        get(key, treeScope?, nodeScope?) {\n            var memory = this._getMemory(treeScope, nodeScope);\n            return memory[key];\n        }\n\n        getCache() {\n            return { base: this._baseMemory, tree: this._treeMemory };\n        }\n\n        setCache(base: any, tree: any) {\n            this._baseMemory = base;\n            this._treeMemory = tree;\n        }\n    }"]}