{"version":3,"sources":["assets/libs/b3/decorators/B3MaxTime.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAA0C;AAC1C,mDAAkD;AAI9C;IAA+B,6BAAW;IAEtC,mBAAY,CAAe;eACvB,kBAAM,CAAC,CAAC;IACZ,CAAC;IAES,8BAAU,GAApB,UAAqB,CAAM;QACvB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE;YACZ,MAAM,mEAAmE,CAAC;SAC7E;QACD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,wBAAI,GAAJ,UAAK,IAAY;QACb,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,wBAAI,GAAJ,UAAK,IAAY;QACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,OAAO,sBAAU,CAAC,KAAK,CAAC;SAC3B;QAED,IAAI,QAAQ,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACtC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAExE,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE;YACrC,OAAO,sBAAU,CAAC,OAAO,CAAC;SAC7B;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,gBAAC;AAAD,CAjCA,AAiCC,CAjC8B,yBAAW,GAiCzC;AAjCY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["import { EnumStatus } from \"../Constants\";\nimport { B3Decorator } from \"../core/B3Decorator\";\nimport { IB3DecoratorProp } from \"../core/B3INodeProperties\";\nimport { B3Tick } from \"../core/B3Tick\";\n\n    export class B3MaxTime extends B3Decorator {\n        maxTime: number;\n        constructor(d: IMaxTimeProp) {\n            super(d);\n        }\n        \n        protected _parseProp(d: any) {\n            if (!d.maxTime) {\n                throw 'maxTime parameter in MaxTime decorator is an obligatory parameter';\n            }\n            this.maxTime = d.maxTime || 0;\n        }\n\n        open(tick: B3Tick) {\n            var startTime = (new Date()).getTime();\n            tick.blackboard.set('startTime', startTime, tick.tree.id, this.id);\n        }\n\n        tick(tick: B3Tick) {\n            if (!this.child) {\n                return EnumStatus.ERROR;\n            }\n\n            var currTime = (new Date()).getTime();\n            var startTime = tick.blackboard.get('startTime', tick.tree.id, this.id);\n\n            var status = this.child.execute(tick);\n            if (currTime - startTime > this.maxTime) {\n                return EnumStatus.FAILURE;\n            }\n\n            return status;\n        }\n    }\n\nexport interface IMaxTimeProp extends IB3DecoratorProp {\n    maxTime: number;\n}"]}