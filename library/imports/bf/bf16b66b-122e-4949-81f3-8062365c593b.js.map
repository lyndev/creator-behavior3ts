{"version":3,"sources":["assets/libs/b3/decorators/B3Repeater.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,0CAA0C;AAC1C,mDAAkD;AAIhD,0BAA0B;AAC1B;IAAgC,8BAAW;IAEzC,oBAAY,CAAkB;eAC5B,kBAAM,CAAC,CAAC;IACV,CAAC;IAES,+BAAU,GAApB,UAAqB,CAAM;QACzB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC;IAED,yBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC;IAGD,yBAAI,GAAJ,UAAK,IAAY;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,sBAAU,CAAC,KAAK,CAAC;SACzB;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,MAAM,GAAG,sBAAU,CAAC,OAAO,CAAC;QAEhC,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;YAC3C,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,MAAM,IAAI,sBAAU,CAAC,OAAO,IAAI,MAAM,IAAI,sBAAU,CAAC,OAAO,EAAE;gBAChE,CAAC,EAAE,CAAC;aACL;iBAAM;gBACL,MAAM;aACP;SACF;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,iBAAC;AAAD,CApCA,AAoCC,CApC+B,yBAAW,GAoC1C;AApCY,gCAAU","file":"","sourceRoot":"/","sourcesContent":["import { EnumStatus } from \"../Constants\";\nimport { B3Decorator } from \"../core/B3Decorator\";\nimport { IB3DecoratorProp } from \"../core/B3INodeProperties\";\nimport { B3Tick } from \"../core/B3Tick\";\n\n  //重复n次，或者直到遇到不是失败或者成功的状态为止\n  export class B3Repeater extends B3Decorator {\n    maxLoop: number;\n    constructor(d: IB3RepeaterProp) {\n      super(d);\n    }\n\n    protected _parseProp(d: any) {\n      this.maxLoop = d.maxLoop || -1;\n    }\n\n    open(tick) {\n      tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    }\n\n\n    tick(tick: B3Tick) {\n      if (!this.child) {\n        return EnumStatus.ERROR;\n      }\n\n      var i = tick.blackboard.get('i', tick.tree.id, this.id);\n      var status = EnumStatus.SUCCESS;\n\n      while (this.maxLoop < 0 || i < this.maxLoop) {\n        status = this.child.execute(tick);\n\n        if (status == EnumStatus.SUCCESS || status == EnumStatus.FAILURE) {\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      tick.blackboard.set('i', i, tick.tree.id, this.id);\n      return status;\n    }\n  }\n\nexport interface IB3RepeaterProp extends IB3DecoratorProp {\n  maxLoop: number\n}"]}